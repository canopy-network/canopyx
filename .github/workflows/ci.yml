name: CI

on:
  pull_request:
  workflow_dispatch:

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  go-lint:
    name: Go Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.x'
          cache: true

      - name: GolangCI-Lint
        uses: golangci/golangci-lint-action@v6
        with:
          version: v1.60.3
          args: --timeout=5m

  go-fmt-check:
    name: Go Format Check (gofmt + goimports)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.x'
          cache: true

      - name: Install goimports
        run: go install golang.org/x/tools/cmd/goimports@latest

      - name: Check gofmt
        run: |
          CHANGED=$(gofmt -s -l . | tee /dev/stderr)
          if [ -n "$CHANGED" ]; then
            echo "::error ::gofmt would reformat the files above. Run 'make fmt'."
            exit 1
          fi

      - name: Check goimports
        run: |
          # Only check .go files outside vendor (actions/checkout doesn't bring vendor by default)
          FILES=$(git ls-files '*.go')
          CHANGED=$(goimports -l $FILES | tee /dev/stderr)
          if [ -n "$CHANGED" ]; then
            echo "::error ::goimports would reformat the files above. Run 'make fmt'."
            exit 1
          fi


  docker-build:
    name: Docker Build (no push)
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        image:
          - { name: admin,      file: Dockerfile.admin,      build-args: "" }
          - { name: indexer,    file: Dockerfile.indexer,    build-args: "" }
          - { name: controller, file: Dockerfile.controller, build-args: "" }
          - { name: query,      file: Dockerfile.query,      build-args: "" }
          - { name: reporter,   file: Dockerfile.reporter,   build-args: "" }
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build ${{ matrix.image.name }}
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ${{ matrix.image.file }}
          push: false
          load: false
          provenance: false
          tags: canopyx/${{ matrix.image.name }}:ci
          build-args: ${{ matrix.image.build-args }}
