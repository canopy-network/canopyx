# -------------------------
# 1) Build the Next.js app
# -------------------------
FROM node:22-alpine AS web-build
WORKDIR /app/web/admin

# Corepack ships with Node 22
RUN corepack enable

# Copy only package manager manifests first for better caching
COPY web/admin/package.json web/admin/pnpm-lock.yaml* web/admin/.npmrc* ./
RUN pnpm install --frozen-lockfile

# Copy the rest and build
COPY web/admin/ ./

RUN pnpm build

# After build, if you use `next export`, you likely have /app/web/admin/out
# If you use standalone output, adjust copy steps below accordingly.

# -------------------------
# 2) Build Go binary
# -------------------------
FROM golang:1.24-alpine AS go-build
WORKDIR /src
ENV CGO_ENABLED=0 GO111MODULE=on

# Copy go manifests first for caching
COPY go.mod go.sum ./
RUN go mod download

# Copy the rest of the source
COPY . .

# Build the admin service
RUN --mount=type=cache,target=/root/.cache/go-build \
    go build -trimpath -ldflags="-s -w" -o /out/admin ./cmd/admin

# -------------------------
# 3) Final runtime image
# -------------------------
FROM alpine:3.20
WORKDIR /app
RUN apk add --no-cache ca-certificates

# Copy admin binary
COPY --from=go-build /out/admin /app/admin

# Copy static assets exported by Next.js (adjust if you use a different outDir)
COPY --from=web-build /app/web/admin/out /app/web/admin/out

# Non-root user
RUN adduser -D -H app && chown -R app:app /app
USER app

EXPOSE 8080
# Your admin server should read and serve from /app/web/admin/out (already in your Go code)
ENTRYPOINT ["/app/admin"]
